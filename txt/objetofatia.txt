2.7.2. Objetos fatia

Isso não é segredo, mas vale a pena repetir, só para ter certeza: s[a:b:c] pode 
ser usado para especificar um passo ou salto c, fazendo com que a fatia resultante 
pule itens. O passo pode ser também negativo, devolvendo os itens em ordem inversa. 
Três exemplos esclarecem a questão:

>>> s = 'bicycle'
>>> s[::3]
'bye'
>>> s[::-1]
'elcycib'
>>> s[::-2]
'eccb'

A notação a:b:c só é válida entre [] quando usada como operador de indexação ou de 
subscrição (subscript), e produz um objeto fatia (slice object): slice(a, b, c). 
Como veremos na Seção 12.5.1, para avaliar a expressão seq[start:stop:step], o 
Python chama seq.__getitem__(slice(start, stop, step)). Mesmo se você não for implementar 
seus próprios tipos de sequência, saber dos objetos fatia é útil, porque eles permitem que 
você atribua nomes às fatias, da mesma forma que planilhas permitem dar nomes a faixas de células.

Suponha que você precise analisar um arquivo de dados como a fatura mostrada na Exemplo 13. 
Em vez de encher seu código de fatias explícitas fixas, você pode nomeá-las. Veja como isso torna legível 
o loop for no final do exemplo.

Exemplo 13. Itens de um arquivo tabular de fatura

>>> invoice = """
... 0.....6.................................40........52...55........
... 1909  Pimoroni PiBrella                     $17.50    3    $52.50
... 1489  6mm Tactile Switch x20                 $4.95    2     $9.90
... 1510  Panavise Jr. - PV-201                 $28.00    1    $28.00
... 1601  PiTFT Mini Kit 320x240                $34.95    1    $34.95
... """
>>> SKU = slice(0, 6)
>>> DESCRIPTION = slice(6, 40)
>>> UNIT_PRICE = slice(40, 52)
>>> QUANTITY =  slice(52, 55)
>>> ITEM_TOTAL = slice(55, None)
>>> line_items = invoice.split('\n')[2:]
>>> for item in line_items:
...     print(item[UNIT_PRICE], item[DESCRIPTION])
...
    $17.50   Pimoroni PiBrella
     $4.95   6mm Tactile Switch x20
    $28.00   Panavise Jr. - PV-201
    $34.95   PiTFT Mini Kit 320x240
